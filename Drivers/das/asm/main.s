; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -o.\objects\main.o --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Drivers -I.\RTE\Device\LPC1768 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.5.0\Device\Include -D__UVISION_VERSION=524 -D_RTE_ -DLPC175x_6x --omf_browse=.\objects\main.crf main.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.ADC_IRQHandler||, CODE, READONLY, ALIGN=2

ADC_IRQHandler PROC
        LDR      r0,|L1.20|
        LDR      r0,[r0,#0xc]
        BIC      r0,r0,#1
        LDR      r1,|L1.20|
        STR      r0,[r1,#0xc]
        MOVS     r0,#1
        LDR      r1,|L1.24|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

|L1.20|
        DCD      0x40034000
|L1.24|
        DCD      ADC0_INT0

        AREA ||i.SPI_IRQHandler||, CODE, READONLY, ALIGN=2

SPI_IRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r0,#1
        LDR      r1,|L2.32|
        STR      r0,[r1,#0x1c]
        MOV      r0,r1
        LDR      r4,[r0,#4]
        UBFX     r4,r4,#3,#4
        CBNZ     r4,|L2.24|
        BL       Spi_SetFlag
        B        |L2.30|
|L2.24|
        MOVS     r0,#2
        BL       Spi_SetStatus
|L2.30|
        POP      {r4,pc}
        ENDP

|L2.32|
        DCD      0x40020000

        AREA ||i.TIMER0_IRQHandler||, CODE, READONLY, ALIGN=2

TIMER0_IRQHandler PROC
        MOVS     r0,#1
        MOV      r1,#0x40004000
        STR      r0,[r1,#0]
        LDR      r1,|L3.16|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L3.16|
        DCD      T0_flag

        AREA ||i.TIMER1_IRQHandler||, CODE, READONLY, ALIGN=2

TIMER1_IRQHandler PROC
        MOVS     r0,#1
        LDR      r1,|L4.12|
        STR      r0,[r1,#0]
        LDR      r1,|L4.16|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

|L4.12|
        DCD      0x40008000
|L4.16|
        DCD      T_up

        AREA ||i.UART2_IRQHandler||, CODE, READONLY, ALIGN=1

UART2_IRQHandler PROC
        PUSH     {r4,lr}
        BL       UART2_IRQHandler_F
        POP      {r4,pc}
        ENDP


        AREA ||i.__NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

__NVIC_EnableIRQ PROC
        CMP      r0,#0
        BLT      |L6.24|
        AND      r2,r0,#0x1f
        MOVS     r1,#1
        LSLS     r1,r1,r2
        LSRS     r2,r0,#5
        LSLS     r2,r2,#2
        ADD      r2,r2,#0xe000e000
        STR      r1,[r2,#0x100]
|L6.24|
        BX       lr
        ENDP


        AREA ||i.delay_function||, CODE, READONLY, ALIGN=2

delay_function PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r0,#0
        LDR      r1,|L7.40|
        STRB     r0,[r1,#0]
        MOV      r1,r4
        MOV      r0,#0x40004000
        BL       Timer_setTime
        MOV      r0,#0x40004000
        BL       Timer_start
        NOP      
|L7.30|
        LDR      r0,|L7.40|
        LDRB     r0,[r0,#0]  ; T0_flag
        CMP      r0,#0
        BEQ      |L7.30|
        POP      {r4,pc}
        ENDP

|L7.40|
        DCD      T0_flag

        AREA ||i.main||, CODE, READONLY, ALIGN=2

main PROC
        SUB      sp,sp,#0x188
        BL       SystemInit
        BL       LED_init
        ADD      r6,sp,#0x174
        MOVS     r0,#0
        STR      r0,[r6,#4]
        STR      r0,[r6,#0]
        LDR      r0,|L8.576|
        STR      r0,[r6,#0x10]
        MOVS     r0,#0
        STR      r0,[r6,#0xc]
        MOVS     r0,#1
        STR      r0,[r6,#8]
        MOV      r0,r6
        BL       SPI_Init
        ADD      r0,sp,#0x168
        STR      r0,[sp,#0x164]
        MOV      r0,#0x40004000
        STR      r0,[sp,#0x168]
        MOVS     r0,#7
        STR      r0,[sp,#0x170]
        MOVS     r0,#1
        STR      r0,[sp,#0x16c]
        LDR      r0,[sp,#0x164]
        BL       Timer_init
        ADD      r0,sp,#0x158
        STR      r0,[sp,#0x154]
        LDR      r0,|L8.580|
        STR      r0,[sp,#0x158]
        MOVS     r0,#3
        STR      r0,[sp,#0x160]
        MOVS     r0,#0xc8
        STR      r0,[sp,#0x15c]
        LDR      r0,[sp,#0x154]
        BL       Timer_init
        ADD      r7,sp,#0x13c
        MOV      r0,#0x1c200
        STR      r0,[r7,#0]
        MOVS     r0,#8
        STR      r0,[r7,#4]
        MOVS     r0,#1
        STR      r0,[r7,#8]
        MOVS     r0,#0
        STR      r0,[r7,#0xc]
        LDR      r0,|L8.584|
        STR      r0,[r7,#0x14]
        ADD      r8,sp,#0xf0
        MOV      r1,r8
        MOV      r0,r7
        BL       UART_Init
        ADD      r9,sp,#0xe0
        MOVS     r0,#0
        STR      r0,[r9,#0]
        MOVS     r0,#1
        STR      r0,[r9,#4]
        MOV      r0,r9
        BL       ADC_Init
        MOVS     r0,#0xd
        BL       __NVIC_EnableIRQ
        MOVS     r0,#1
        BL       __NVIC_EnableIRQ
        MOVS     r0,#2
        BL       __NVIC_EnableIRQ
        MOVS     r0,#7
        BL       __NVIC_EnableIRQ
        MOVS     r0,#0x16
        BL       __NVIC_EnableIRQ
        ADD      r5,sp,#0x9c
        MOVS     r0,#0
        STRB     r0,[r5,#1]
        STRB     r0,[r5,#2]
        LDR      r0,|L8.588|
        STR      r0,[r5,#4]
        LDR      r0,|L8.592|
        STR      r0,[r5,#8]
        LDR      r0,|L8.596|
        STR      r0,[r5,#0xc]
        MOV      r0,r5
        BL       bme280_init
        STR      r0,[sp,#0xdc]
        LDR      r0,[sp,#0xdc]
        CBNZ     r0,|L8.208|
        MOV      r0,r5
        BL       set_sensor_normal_mode
|L8.208|
        MOV      r0,r8
        BL       UART_E_RBR_I
        ADD      r10,sp,#0x38
        MOV      r0,r9
        BL       ADC_E_I
        MOV      r0,r10
        BL       ADC_StartConversion
        MOVS     r0,#1
        STR      r0,[sp,#0x34]
        MOVS     r0,#0
        STR      r0,[sp,#0x18]
        STR      r0,[sp,#0x1c]
        STR      r0,[sp,#0x20]
        STR      r0,[sp,#0x24]
        ADD      r0,sp,#0x18
        STR      r0,[sp,#0x14]
        MOV      r11,#0x19
        MOVS     r0,#0
        STR      r0,[sp,#0x10]
        MOVS     r0,#0x19
        STR      r0,[sp,#0xc]
        MOVS     r0,#0
        STR      r0,[sp,#8]
        MOVS     r4,#0
        NOP      
        LDR      r0,|L8.580|
        BL       Timer_start
        B        |L8.572|
|L8.276|
        LDR      r0,|L8.600|
        LDRB     r0,[r0,#0]  ; T_up
        CMP      r0,#1
        BNE      |L8.362|
        MOVS     r0,#0
        LDR      r1,|L8.600|
        STRB     r0,[r1,#0]
        SUB      r11,r11,#1
        CMP      r11,#0
        BNE      |L8.304|
        MOVS     r0,#1
        B        |L8.306|
|L8.304|
        MOVS     r0,#0
|L8.306|
        LDR      r1,[sp,#8]
        CMP      r1,#1
        BNE      |L8.314|
        B        |L8.316|
|L8.314|
        MOVS     r1,#0
|L8.316|
        ORRS     r0,r0,r1
        CBZ      r0,|L8.332|
        MOVS     r0,#0
        STR      r0,[sp,#8]
        LDR      r11,[sp,#0xc]
        MOVS     r0,#1
        STR      r0,[sp,#0x10]
|L8.332|
        MOV      r2,r5
        ADD      r1,sp,#0x28
        MOVS     r0,#7
        BL       bme280_get_sensor_data
        STR      r0,[sp,#0x34]
        LDR      r0,[sp,#0x34]
        CBNZ     r0,|L8.356|
        MOVS     r0,#0
        BL       LED_off
        B        |L8.362|
|L8.356|
        MOVS     r0,#0
        BL       LED_on
|L8.362|
        LDR      r0,|L8.604|
        LDRB     r0,[r0,#0]  ; ADC0_INT0
        CMP      r0,#1
        BNE      |L8.416|
        MOV      r0,r10
        BL       ADC_ReadData
        MOVS     r0,#0
        LDR      r1,|L8.604|
        STRB     r0,[r1,#0]
        NOP      
        NOP      
        B        |L8.394|
|L8.388|
        LDR      r1,[r10,r0,LSL #2]
        ADDS     r0,r0,#1
|L8.394|
        CMP      r0,#0x18
        BCC      |L8.388|
        NOP      
        NOP      
        MOV      r0,r9
        BL       ADC_E_I
        MOV      r0,r10
        BL       ADC_StartConversion
        NOP      
|L8.416|
        LDR      r0,[r8,#0x48]
        LDR      r0,[r0,#0xc]
        CMP      r0,#1
        BNE      |L8.438|
        MOVS     r3,#1
        MOVS     r2,#0
        MOV      r1,r2
        MOV      r0,r8
        BL       UART_tx
|L8.438|
        LDR      r0,[r8,#0x48]
        LDR      r0,[r0,#4]
        CMP      r0,#1
        BNE      |L8.534|
        STR      r0,[sp,#8]
        MOV      r0,r8
        BL       UART_rx
        MOVS     r0,#0x30
        STR      r0,[sp,#4]
        LDRB     r0,[r8,#0x42]
        SUBS     r0,r0,#1
        ADD      r1,r8,#0x18
        LDRB     r0,[r1,r0]
        STR      r0,[sp,#4]
        LDR      r0,[sp,#4]
        CMP      r0,#0x30
        BEQ      |L8.494|
        CMP      r0,#0x31
        BEQ      |L8.500|
        CMP      r0,#0x32
        BEQ      |L8.506|
        CMP      r0,#0x33
        BNE      |L8.518|
        B        |L8.512|
|L8.494|
        MOVS     r0,#5
        STR      r0,[sp,#0xc]
        B        |L8.530|
|L8.500|
        MOVS     r0,#0xa
        STR      r0,[sp,#0xc]
        B        |L8.530|
|L8.506|
        MOVS     r0,#0x19
        STR      r0,[sp,#0xc]
        B        |L8.530|
|L8.512|
        MOVS     r0,#0x32
        STR      r0,[sp,#0xc]
        B        |L8.530|
|L8.518|
        MOVS     r0,#0
        STR      r0,[sp,#0x18]
        MOVS     r0,#1
        BL       LED_on
        NOP      
|L8.530|
        NOP      
        NOP      
|L8.534|
        LDR      r0,[sp,#0x10]
        CMP      r0,#1
        BNE      |L8.572|
        MOVS     r0,#0
        STR      r0,[sp,#0x10]
        STR      r4,[sp,#0x18]
        ADDS     r4,r4,#1
        STR      r4,[sp,#0x1c]
        ADDS     r4,r4,#1
        STR      r4,[sp,#0x20]
        ADDS     r4,r4,#1
        STR      r4,[sp,#0x24]
        ADDS     r4,r4,#1
        MOVS     r3,#0
        MOVS     r2,#4
        MOV      r0,r8
        LDR      r1,[sp,#0x14]
        BL       UART_tx
|L8.572|
        B        |L8.276|
        ENDP

        DCW      0x0000
|L8.576|
        DCD      0x000f4240
|L8.580|
        DCD      0x40008000
|L8.584|
        DCD      0x40098000
|L8.588|
        DCD      spi_read
|L8.592|
        DCD      spi_write
|L8.596|
        DCD      delay_function
|L8.600|
        DCD      T_up
|L8.604|
        DCD      ADC0_INT0

        AREA ||i.set_sensor_normal_mode||, CODE, READONLY, ALIGN=1

set_sensor_normal_mode PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r1,#1
        MOVS     r0,#0x3a
        STRB     r1,[r0,r4]
        MOVS     r0,#5
        STRB     r0,[r4,#0x38]
        MOVS     r1,#2
        MOVS     r0,#0x39
        STRB     r1,[r0,r4]
        MOVS     r1,#4
        MOVS     r0,#0x3b
        STRB     r1,[r0,r4]
        MOVS     r1,#1
        MOVS     r0,#0x3c
        STRB     r1,[r0,r4]
        MOVS     r5,#1
        ORR      r5,r5,#2
        ORR      r5,r5,#4
        ORR      r5,r5,#0x10
        ORR      r5,r5,#8
        MOV      r1,r4
        MOV      r0,r5
        BL       bme280_set_sensor_settings
        MOV      r6,r0
        MOV      r1,r4
        MOVS     r0,#3
        BL       bme280_set_sensor_mode
        MOV      r6,r0
        MOV      r0,r6
        POP      {r4-r6,pc}
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.data||, DATA, ALIGN=0

T0_flag
        DCB      0x00
T_up
        DCB      0x00

;*** Start embedded assembler ***

#line 1 "main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 478
|__asm___6_main_c_main____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 665
|__asm___6_main_c_main____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

__ARM_use_no_argv EQU 0

        EXPORT __ARM_use_no_argv
        EXPORT ADC_IRQHandler [CODE]
        EXPORT SPI_IRQHandler [CODE]
        EXPORT TIMER0_IRQHandler [CODE]
        EXPORT TIMER1_IRQHandler [CODE]
        EXPORT UART2_IRQHandler [CODE]
        EXPORT delay_function [CODE]
        EXPORT main [CODE]
        EXPORT set_sensor_normal_mode [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT bme280_set_sensor_settings [CODE]
        IMPORT bme280_set_sensor_mode [CODE]
        IMPORT Timer_setTime [CODE]
        IMPORT Timer_start [CODE]
        IMPORT SystemInit [CODE]
        IMPORT LED_init [CODE]
        IMPORT SPI_Init [CODE]
        IMPORT Timer_init [CODE]
        IMPORT UART_Init [CODE]
        IMPORT ADC_Init [CODE]
        IMPORT bme280_init [CODE]
        IMPORT UART_E_RBR_I [CODE]
        IMPORT ADC_E_I [CODE]
        IMPORT ADC_StartConversion [CODE]
        IMPORT bme280_get_sensor_data [CODE]
        IMPORT LED_off [CODE]
        IMPORT LED_on [CODE]
        IMPORT ADC_ReadData [CODE]
        IMPORT UART_tx [CODE]
        IMPORT UART_rx [CODE]
        IMPORT spi_read [CODE]
        IMPORT spi_write [CODE]
        IMPORT ADC0_INT0 [DATA]
        IMPORT Spi_SetFlag [CODE]
        IMPORT Spi_SetStatus [CODE]
        IMPORT UART2_IRQHandler_F [CODE]

        KEEP __NVIC_EnableIRQ
        KEEP T0_flag
        KEEP T_up

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
