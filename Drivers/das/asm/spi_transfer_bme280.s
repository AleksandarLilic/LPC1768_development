; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -o.\objects\spi_transfer_bme280.o --depend=.\objects\spi_transfer_bme280.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Drivers -I.\RTE\Device\LPC1768 -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\LPC1700_DFP\2.5.0\Device\Include -D__UVISION_VERSION=524 -D_RTE_ -DLPC175x_6x --omf_browse=.\objects\spi_transfer_bme280.crf Drivers\SPI_transfer_BME280.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.Spi_ClearFlag||, CODE, READONLY, ALIGN=2

Spi_ClearFlag PROC
        MOVS     r0,#0
        LDR      r1,|L1.8|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

|L1.8|
        DCD      transferFlag

        AREA ||i.Spi_GetStatus||, CODE, READONLY, ALIGN=2

Spi_GetStatus PROC
        LDR      r0,|L2.12|
        LDR      r0,[r0,#0]  ; transfer
        LDRSB    r0,[r0,#0x14]
        BX       lr
        ENDP

        DCW      0x0000
|L2.12|
        DCD      transfer

        AREA ||i.Spi_SetFlag||, CODE, READONLY, ALIGN=2

Spi_SetFlag PROC
        MOVS     r0,#1
        LDR      r1,|L3.8|
        STRB     r0,[r1,#0]
        BX       lr
        ENDP

|L3.8|
        DCD      transferFlag

        AREA ||i.Spi_SetStatus||, CODE, READONLY, ALIGN=2

Spi_SetStatus PROC
        SXTB     r1,r0
        LDR      r2,|L4.12|
        LDR      r2,[r2,#0]  ; transfer
        STRB     r1,[r2,#0x14]
        BX       lr
        ENDP

        DCW      0x0000
|L4.12|
        DCD      transfer

        AREA ||i.save_read_data||, CODE, READONLY, ALIGN=2

save_read_data PROC
        PUSH     {r4,lr}
        BL       Spi_ClearFlag
        LDR      r0,|L5.128|
        LDR      r0,[r0,#8]
        UXTB     r4,r0
        LDR      r0,|L5.132|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#0x10]
        LDR      r1,|L5.132|
        LDR      r1,[r1,#0]  ; transfer
        LDRH     r1,[r1,#2]
        CMP      r0,r1
        BHI      |L5.32|
        MOVS     r0,#1
        B        |L5.34|
|L5.32|
        MOVS     r0,#0
|L5.34|
        LDR      r1,|L5.132|
        LDR      r1,[r1,#0]  ; transfer
        LDR      r1,[r1,#0x10]
        CBZ      r1,|L5.46|
        MOVS     r1,#1
        B        |L5.48|
|L5.46|
        MOVS     r1,#0
|L5.48|
        ANDS     r0,r0,r1
        CBZ      r0,|L5.74|
        LDR      r0,|L5.132|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#8]
        STRB     r4,[r0,#0]
        LDR      r0,|L5.132|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#8]
        ADDS     r0,r0,#1
        LDR      r1,|L5.132|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#8]
|L5.74|
        LDR      r0,|L5.132|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#0x10]
        LDR      r1,|L5.132|
        LDR      r1,[r1,#0]  ; transfer
        LDRH     r1,[r1,#2]
        CMP      r0,r1
        BNE      |L5.104|
        BL       SPI_DisableInterrupt
        MOVS     r0,#0
        LDR      r1,|L5.132|
        LDR      r1,[r1,#0]  ; transfer
        STRB     r0,[r1,#0x14]
        B        |L5.124|
|L5.104|
        MOVS     r0,#0xaa
        LDR      r1,|L5.128|
        STR      r0,[r1,#8]
        LDR      r0,|L5.132|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#0x10]
        ADDS     r0,r0,#1
        LDR      r1,|L5.132|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#0x10]
|L5.124|
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L5.128|
        DCD      0x40020000
|L5.132|
        DCD      transfer

        AREA ||i.send_data||, CODE, READONLY, ALIGN=2

send_data PROC
        PUSH     {r4,lr}
        BL       Spi_ClearFlag
        LDR      r0,|L6.84|
        LDR      r0,[r0,#8]
        UXTB     r4,r0
        LDR      r0,|L6.88|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#0xc]
        LDR      r1,|L6.88|
        LDR      r1,[r1,#0]  ; transfer
        LDRH     r1,[r1,#0]
        CMP      r0,r1
        BNE      |L6.42|
        BL       SPI_DisableInterrupt
        MOVS     r0,#0
        LDR      r1,|L6.88|
        LDR      r1,[r1,#0]  ; transfer
        STRB     r0,[r1,#0x14]
        B        |L6.82|
|L6.42|
        LDR      r0,|L6.88|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#4]
        LDRB     r0,[r0,#0]
        LDR      r1,|L6.84|
        STR      r0,[r1,#8]
        LDR      r0,|L6.88|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#4]
        ADDS     r0,r0,#1
        LDR      r1,|L6.88|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#4]
        LDR      r0,|L6.88|
        LDR      r0,[r0,#0]  ; transfer
        LDR      r0,[r0,#0xc]
        ADDS     r0,r0,#1
        LDR      r1,|L6.88|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#0xc]
|L6.82|
        POP      {r4,pc}
        ENDP

|L6.84|
        DCD      0x40020000
|L6.88|
        DCD      transfer

        AREA ||i.spi_read||, CODE, READONLY, ALIGN=2

spi_read PROC
        PUSH     {r4-r8,lr}
        MOV      r8,r0
        MOV      r4,r1
        MOV      r5,r2
        MOV      r6,r3
        MOVS     r7,#0
        MOVS     r0,#0
        LDR      r1,|L7.128|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#4]
        LDR      r1,|L7.128|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#0xc]
        LDR      r1,|L7.128|
        LDR      r1,[r1,#0]  ; transfer
        STRH     r0,[r1,#0]
        LDR      r0,|L7.128|
        LDR      r0,[r0,#0]  ; transfer
        STR      r5,[r0,#8]
        LDR      r0,|L7.128|
        LDR      r0,[r0,#0]  ; transfer
        STRH     r6,[r0,#2]
        MOVS     r0,#0
        LDR      r1,|L7.128|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#0x10]
        MOVS     r2,#0
        MOVS     r1,#0x10
        MOV      r0,r2
        BL       GPIO_PinWrite
        LDR      r0,|L7.132|
        STR      r4,[r0,#8]
        MOVS     r0,#1
        LDR      r1,|L7.128|
        LDR      r1,[r1,#0]  ; transfer
        STRB     r0,[r1,#0x14]
        BL       SPI_EnableInterrupt
        B        |L7.94|
|L7.82|
        LDR      r0,|L7.136|
        LDRB     r0,[r0,#0]  ; transferFlag
        CMP      r0,#1
        BNE      |L7.94|
        BL       save_read_data
|L7.94|
        LDR      r0,|L7.128|
        LDR      r0,[r0,#0]  ; transfer
        LDRB     r0,[r0,#0x14]
        CMP      r0,#1
        BEQ      |L7.82|
        LDR      r0,|L7.128|
        LDR      r0,[r0,#0]  ; transfer
        LDRSB    r7,[r0,#0x14]
        MOVS     r2,#1
        MOVS     r1,#0x10
        MOVS     r0,#0
        BL       GPIO_PinWrite
        MOV      r0,r7
        POP      {r4-r8,pc}
        ENDP

|L7.128|
        DCD      transfer
|L7.132|
        DCD      0x40020000
|L7.136|
        DCD      transferFlag

        AREA ||i.spi_write||, CODE, READONLY, ALIGN=2

spi_write PROC
        PUSH     {r4-r10,lr}
        MOV      r9,r0
        MOV      r4,r1
        MOV      r5,r2
        MOV      r6,r3
        MOVS     r7,#0
        LDR      r0,|L8.136|
        LDR      r0,[r0,#8]
        AND      r8,r0,#0xff
        LDR      r0,|L8.140|
        LDR      r0,[r0,#0]  ; transfer
        STR      r5,[r0,#4]
        MOVS     r0,#0
        LDR      r1,|L8.140|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#0xc]
        LDR      r0,|L8.140|
        LDR      r0,[r0,#0]  ; transfer
        STRH     r6,[r0,#0]
        MOVS     r0,#0
        LDR      r1,|L8.140|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#8]
        LDR      r1,|L8.140|
        LDR      r1,[r1,#0]  ; transfer
        STRH     r0,[r1,#2]
        LDR      r1,|L8.140|
        LDR      r1,[r1,#0]  ; transfer
        STR      r0,[r1,#0x10]
        MOVS     r2,#0
        MOVS     r1,#0x10
        MOV      r0,r2
        BL       GPIO_PinWrite
        LDR      r0,|L8.136|
        STR      r4,[r0,#8]
        MOVS     r0,#5
        LDR      r1,|L8.140|
        LDR      r1,[r1,#0]  ; transfer
        STRB     r0,[r1,#0x14]
        BL       SPI_EnableInterrupt
        B        |L8.102|
|L8.90|
        LDR      r0,|L8.144|
        LDRB     r0,[r0,#0]  ; transferFlag
        CMP      r0,#1
        BNE      |L8.102|
        BL       send_data
|L8.102|
        LDR      r0,|L8.140|
        LDR      r0,[r0,#0]  ; transfer
        LDRB     r0,[r0,#0x14]
        CMP      r0,#5
        BEQ      |L8.90|
        MOVS     r2,#1
        MOVS     r1,#0x10
        MOVS     r0,#0
        BL       GPIO_PinWrite
        LDR      r0,|L8.140|
        LDR      r0,[r0,#0]  ; transfer
        LDRSB    r7,[r0,#0x14]
        MOV      r0,r7
        POP      {r4-r10,pc}
        ENDP

|L8.136|
        DCD      0x40020000
|L8.140|
        DCD      transfer
|L8.144|
        DCD      transferFlag

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

transfer_struc
        %        24

        AREA ||.data||, DATA, ALIGN=2

transfer
        DCD      transfer_struc
transferFlag
        DCB      0x00

;*** Start embedded assembler ***

#line 1 "Drivers\\SPI_transfer_BME280.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_SPI_transfer_BME280_c_spi_read____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___21_SPI_transfer_BME280_c_spi_read____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_SPI_transfer_BME280_c_spi_read____REVSH|
#line 478
|__asm___21_SPI_transfer_BME280_c_spi_read____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_SPI_transfer_BME280_c_spi_read____RRX|
#line 665
|__asm___21_SPI_transfer_BME280_c_spi_read____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT Spi_ClearFlag [CODE]
        EXPORT Spi_GetStatus [CODE]
        EXPORT Spi_SetFlag [CODE]
        EXPORT Spi_SetStatus [CODE]
        EXPORT save_read_data [CODE]
        EXPORT send_data [CODE]
        EXPORT spi_read [CODE]
        EXPORT spi_write [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT SPI_DisableInterrupt [CODE]
        IMPORT GPIO_PinWrite [CODE]
        IMPORT SPI_EnableInterrupt [CODE]

        KEEP transfer_struc
        KEEP transfer
        KEEP transferFlag

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
