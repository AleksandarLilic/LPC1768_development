<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\das_v0_1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\das_v0_1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Tue Jun 18 19:38:23 2019
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; set_sensor_normal_mode &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[47]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">BOD_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from main.o(i.ADC_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from main.o(i.SPI_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_lpc17xx.o(i.SystemInit) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from main.o(i.TIMER0_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from main.o(i.TIMER1_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from main.o(i.UART2_IRQHandler) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[35]">delay_function</a> from main.o(i.delay_function) referenced from main.o(i.main)
 <LI><a href="#[33]">spi_read</a> from spi_transfer_bme280.o(i.spi_read) referenced from main.o(i.main)
 <LI><a href="#[34]">spi_write</a> from spi_transfer_bme280.o(i.spi_write) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[9e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[af]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[43]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[38]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[bb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[bc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; set_sensor_normal_mode &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[48]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[42]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[be]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[44]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[41]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>ADC_E_I</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc1768_adc.o(i.ADC_E_I))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ADC_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc1768_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_Init &rArr; ADC_PinInit &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SetSampleRate
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Power_Enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PinInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>ADC_ReadData</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc1768_adc.o(i.ADC_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>ADC_StartConversion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc1768_adc.o(i.ADC_StartConversion))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>GPIO_PinDirection</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, lpc1768_gpio.o(i.GPIO_PinDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PinInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PinInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
</UL>

<P><STRONG><a name="[4e]"></a>GPIO_PinFunction</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, lpc1768_gpio.o(i.GPIO_PinFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PinInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PinInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PinInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
</UL>

<P><STRONG><a name="[52]"></a>GPIO_PinWrite</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, lpc1768_gpio.o(i.GPIO_PinWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_on
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_off
</UL>

<P><STRONG><a name="[50]"></a>LED_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lpc1768_led.o(i.LED_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_init &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>LED_off</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lpc1768_led.o(i.LED_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_off &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>LED_on</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lpc1768_led.o(i.LED_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_on &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>SPI_DisableInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc1768_spi.o(i.SPI_DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_read_data
</UL>

<P><STRONG><a name="[5b]"></a>SPI_EnableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc1768_spi.o(i.SPI_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetStatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_SetFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lpc1768_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_Init &rArr; SPI_PinInit &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClock
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PinInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ControlRegister_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>Spi_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_transfer_bme280.o(i.Spi_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_read_data
</UL>

<P><STRONG><a name="[54]"></a>Spi_SetFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_transfer_bme280.o(i.Spi_SetFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>Spi_SetStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_transfer_bme280.o(i.Spi_SetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 302 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>Timer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lpc1768_timer.o(i.Timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer_init &rArr; getPrescalarValue
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPrescalarValue
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>Timer_setTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lpc1768_timer.o(i.Timer_setTime))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_function
</UL>

<P><STRONG><a name="[87]"></a>Timer_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc1768_timer.o(i.Timer_start))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_function
</UL>

<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler &rArr; UART2_IRQHandler_F
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler_F
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART2_IRQHandler_F</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lpc1768_uart.o(i.UART2_IRQHandler_F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler_F
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>UART_D_THRE_I</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc1768_uart.o(i.UART_D_THRE_I))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQ_tx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Blocking_tx
</UL>

<P><STRONG><a name="[6f]"></a>UART_E_RBR_I</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc1768_uart.o(i.UART_E_RBR_I))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_rx
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>UART_E_THRE_I</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc1768_uart.o(i.UART_E_THRE_I))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Blocking_tx
</UL>

<P><STRONG><a name="[66]"></a>UART_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lpc1768_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_Init &rArr; UART_PinInit &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudRate
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Power_Enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PinInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Get_Number
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetClock
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Format
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EnableBuffers
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>UART_rx</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, lpc1768_uart.o(i.UART_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_E_RBR_I
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>UART_tx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lpc1768_uart.o(i.UART_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_tx &rArr; UART_IRQ_tx &rArr; UART_LtS
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQ_tx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Blocking_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>bme280_compensate_data</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bme280.o(i.bme280_compensate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bme280_compensate_data &rArr; compensate_pressure
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[75]"></a>bme280_get_regs</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bme280.o(i.bme280_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[77]"></a>bme280_get_sensor_data</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, bme280.o(i.bme280_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_pressure
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_parse_sensor_data
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>bme280_get_sensor_mode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bme280.o(i.bme280_get_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bme280_get_sensor_mode &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[7a]"></a>bme280_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bme280.o(i.bme280_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bme280_init &rArr; bme280_soft_reset &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>bme280_parse_sensor_data</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, bme280.o(i.bme280_parse_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bme280_parse_sensor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[7d]"></a>bme280_set_regs</STRONG> (Thumb, 158 bytes, Stack size 56 bytes, bme280.o(i.bme280_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interleave_reg_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>

<P><STRONG><a name="[7f]"></a>bme280_set_sensor_mode</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bme280.o(i.bme280_set_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bme280_set_sensor_mode &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_power_mode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_normal_mode
</UL>

<P><STRONG><a name="[82]"></a>bme280_set_sensor_settings</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bme280.o(i.bme280_set_sensor_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_settings_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_normal_mode
</UL>

<P><STRONG><a name="[7b]"></a>bme280_soft_reset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bme280.o(i.bme280_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bme280_soft_reset &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>

<P><STRONG><a name="[35]"></a>delay_function</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.delay_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_function
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_setTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 574 bytes, Stack size 392 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = main &rArr; set_sensor_normal_mode &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_tx
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_rx
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_E_RBR_I
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_start
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_on
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_off
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadData
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_E_I
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sensor_normal_mode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[92]"></a>save_read_data</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, spi_transfer_bme280.o(i.save_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = save_read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableInterrupt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>

<P><STRONG><a name="[95]"></a>send_data</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spi_transfer_bme280.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DisableInterrupt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>

<P><STRONG><a name="[8c]"></a>set_sensor_normal_mode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, main.o(i.set_sensor_normal_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = set_sensor_normal_mode &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>spi_read</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, spi_transfer_bme280.o(i.spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_read &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableInterrupt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[34]"></a>spi_write</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, spi_transfer_bme280.o(i.spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spi_write &rArr; GPIO_PinWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableInterrupt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinWrite
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8b]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>are_settings_changed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bme280.o(i.are_settings_changed))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[74]"></a>compensate_humidity</STRONG> (Thumb, 270 bytes, Stack size 36 bytes, bme280.o(i.compensate_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = compensate_humidity
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[73]"></a>compensate_pressure</STRONG> (Thumb, 400 bytes, Stack size 44 bytes, bme280.o(i.compensate_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = compensate_pressure
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[72]"></a>compensate_temperature</STRONG> (Thumb, 136 bytes, Stack size 28 bytes, bme280.o(i.compensate_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = compensate_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[96]"></a>fill_filter_settings</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280.o(i.fill_filter_settings))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>

<P><STRONG><a name="[9a]"></a>fill_osr_press_settings</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280.o(i.fill_osr_press_settings))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
</UL>

<P><STRONG><a name="[9b]"></a>fill_osr_temp_settings</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280.o(i.fill_osr_temp_settings))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
</UL>

<P><STRONG><a name="[97]"></a>fill_standby_settings</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280.o(i.fill_standby_settings))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>

<P><STRONG><a name="[7c]"></a>get_calib_data</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bme280.o(i.get_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_calib_data &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_press_calib_data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_humidity_calib_data
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>

<P><STRONG><a name="[7e]"></a>interleave_reg_addr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bme280.o(i.interleave_reg_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = interleave_reg_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
</UL>

<P><STRONG><a name="[76]"></a>null_ptr_check</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bme280.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[90]"></a>parse_device_settings</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bme280.o(i.parse_device_settings))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[8a]"></a>parse_humidity_calib_data</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, bme280.o(i.parse_humidity_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_humidity_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[89]"></a>parse_temp_press_calib_data</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, bme280.o(i.parse_temp_press_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parse_temp_press_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[80]"></a>put_device_to_sleep</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bme280.o(i.put_device_to_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = put_device_to_sleep &rArr; reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[91]"></a>reload_device_settings</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bme280.o(i.reload_device_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = reload_device_settings &rArr; set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[85]"></a>set_filter_standby_settings</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bme280.o(i.set_filter_standby_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_filter_standby_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_standby_settings
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_filter_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[98]"></a>set_osr_humidity_settings</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bme280.o(i.set_osr_humidity_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_osr_humidity_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
</UL>

<P><STRONG><a name="[99]"></a>set_osr_press_temp_settings</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, bme280.o(i.set_osr_press_temp_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_osr_temp_settings
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_osr_press_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
</UL>

<P><STRONG><a name="[84]"></a>set_osr_settings</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bme280.o(i.set_osr_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_osr_settings &rArr; set_osr_press_temp_settings &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_press_temp_settings
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_humidity_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_device_settings
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[81]"></a>write_power_mode</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bme280.o(i.write_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_power_mode &rArr; bme280_set_regs &rArr; interleave_reg_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[4b]"></a>ADC_GetClock</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lpc1768_adc.o(i.ADC_GetClock))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4d]"></a>ADC_PinInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lpc1768_adc.o(i.ADC_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_PinInit &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4a]"></a>ADC_Power_Enable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lpc1768_adc.o(i.ADC_Power_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[4c]"></a>ADC_SetSampleRate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc1768_adc.o(i.ADC_SetSampleRate))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[60]"></a>UART_Blocking_tx</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lpc1768_uart.o(i.UART_Blocking_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_Blocking_tx &rArr; UART_LtS
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_E_THRE_I
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_D_THRE_I
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_load_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LtS
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_tx
</UL>

<P><STRONG><a name="[6b]"></a>UART_EnableBuffers</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lpc1768_uart.o(i.UART_EnableBuffers))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[6d]"></a>UART_Format</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lpc1768_uart.o(i.UART_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Format
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[69]"></a>UART_GetClock</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, lpc1768_uart.o(i.UART_GetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[67]"></a>UART_Get_Number</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lpc1768_uart.o(i.UART_Get_Number))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[65]"></a>UART_IRQ_tx</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lpc1768_uart.o(i.UART_IRQ_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_IRQ_tx &rArr; UART_LtS
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_D_THRE_I
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_load_fifo
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_LtS
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_tx
</UL>

<P><STRONG><a name="[62]"></a>UART_LtS</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, lpc1768_uart.o(i.UART_LtS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_LtS
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQ_tx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Blocking_tx
</UL>

<P><STRONG><a name="[6c]"></a>UART_PinInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lpc1768_uart.o(i.UART_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART_PinInit &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[68]"></a>UART_Power_Enable</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, lpc1768_uart.o(i.UART_Power_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[6a]"></a>UART_SetBaudRate</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, lpc1768_uart.o(i.UART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_SetBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[63]"></a>UART_load_fifo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lpc1768_uart.o(i.UART_load_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_load_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IRQ_tx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Blocking_tx
</UL>

<P><STRONG><a name="[5d]"></a>Timer_configure</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lpc1768_timer.o(i.Timer_configure))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_init
</UL>

<P><STRONG><a name="[5e]"></a>getPrescalarValue</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lpc1768_timer.o(i.getPrescalarValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getPrescalarValue
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_init
</UL>

<P><STRONG><a name="[5a]"></a>SPI_ControlRegister_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lpc1768_spi.o(i.SPI_ControlRegister_Init))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[57]"></a>SPI_Enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc1768_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[59]"></a>SPI_PinInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, lpc1768_spi.o(i.SPI_PinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_PinInit &rArr; GPIO_PinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[58]"></a>SPI_SetClock</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, lpc1768_spi.o(i.SPI_SetClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_SetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
